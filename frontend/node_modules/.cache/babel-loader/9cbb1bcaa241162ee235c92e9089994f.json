{"ast":null,"code":"import { noop, PanSession } from \"@chakra-ui/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { usePointerEvent } from \"./use-pointer-event\";\nimport { useUnmountEffect } from \"./use-unmount-effect\";\nexport function usePanGesture(ref, props) {\n  var {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart\n  } = props;\n  var hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart);\n  var panSession = useRef(null);\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n\n  };\n  useEffect(() => {\n    var _panSession$current;\n\n    (_panSession$current = panSession.current) == null ? void 0 : _panSession$current.updateHandlers(handlers);\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers);\n  }\n\n  usePointerEvent(() => ref.current, \"pointerdown\", hasPanEvents ? onPointerDown : noop);\n  useUnmountEffect(() => {\n    var _panSession$current2;\n\n    return (_panSession$current2 = panSession.current) == null ? void 0 : _panSession$current2.end();\n  });\n}","map":{"version":3,"sources":["../../src/use-pan-gesture.ts"],"names":["onPanSessionStart","hasPanEvents","Boolean","onPan","panSession","useRef","handlers","onSessionStart","onStart","onMove","onEnd","onPanEnd","useEffect","usePointerEvent","ref","useUnmountEffect"],"mappings":"AAAA,SAAA,IAAA,EAAA,UAAA,QAAA,kBAAA;AAOA,SAAA,SAAA,EAAA,MAAA,QAAA,OAAA;AACA,SAAA,eAAA,QAAA,qBAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;AASA,OAAO,SAAA,aAAA,CAAA,GAAA,EAAA,KAAA,EAGL;AACA,MAAM;AAAA,IAAA,KAAA;AAAA,IAAA,UAAA;AAAA,IAAA,QAAA;AAA+BA,IAAAA;AAA/B,MAAN,KAAA;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAC1BC,KAAK,IAALA,UAAAA,IAAAA,QAAAA,IADF,iBAA4B,CAA5B;AAIA,MAAMC,UAAU,GAAGC,MAAM,CAAzB,IAAyB,CAAzB;AAEA,MAAMC,QAAqC,GAAG;AAC5CC,IAAAA,cAAc,EAD8B,iBAAA;AAE5CC,IAAAA,OAAO,EAFqC,UAAA;AAG5CC,IAAAA,MAAM,EAHsC,KAAA;;AAI5CC,IAAAA,KAAK,CAAA,KAAA,EAAA,IAAA,EAAc;AACjBN,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AACAO,MAAAA,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAA,KAAA,EAARA,IAAQ,CAARA;AACD;;AAP2C,GAA9C;AAUAC,EAAAA,SAAS,CAAC,MAAM;AAAA,QAAA,mBAAA;;AACd,KAAA,mBAAA,GAAA,UAAU,CAAV,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAA,cAAA,CAAA,QAAA,CAAA;AADFA,GAAS,CAATA;;AAIA,WAAA,aAAA,CAAA,KAAA,EAA+C;AAC7CR,IAAAA,UAAU,CAAVA,OAAAA,GAAqB,IAAA,UAAA,CAAA,KAAA,EAArBA,QAAqB,CAArBA;AACD;;AAEDS,EAAAA,eAAe,CACb,MAAMC,GAAG,CADI,OAAA,EAAA,aAAA,EAGbb,YAAY,GAAA,aAAA,GAHdY,IAAe,CAAfA;AAMAE,EAAAA,gBAAgB,CAAC,MAAA;AAAA,QAAA,oBAAA;;AAAA,WAAA,CAAA,oBAAA,GAAMX,UAAU,CAAhB,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAMA,oBAAAA,CAAN,GAAMA,EAAN;AAAjBW,GAAgB,CAAhBA;AACD","sourcesContent":["import {\n  AnyPointerEvent,\n  noop,\n  PanHandler,\n  PanSession,\n  PanSessionHandlers,\n} from \"@chakra-ui/utils\"\nimport React, { useEffect, useRef } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\nimport { useUnmountEffect } from \"./use-unmount-effect\"\n\nexport interface UsePanGestureProps {\n  onPan?: PanHandler\n  onPanStart?: PanHandler\n  onPanEnd?: PanHandler\n  onPanSessionStart?: PanHandler\n}\n\nexport function usePanGesture(\n  ref: React.RefObject<HTMLElement>,\n  props: UsePanGestureProps,\n) {\n  const { onPan, onPanStart, onPanEnd, onPanSessionStart } = props\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart,\n  )\n\n  const panSession = useRef<PanSession | null>(null)\n\n  const handlers: Partial<PanSessionHandlers> = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  }\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlers)\n  })\n\n  function onPointerDown(event: AnyPointerEvent) {\n    panSession.current = new PanSession(event, handlers)\n  }\n\n  usePointerEvent(\n    () => ref.current,\n    \"pointerdown\",\n    hasPanEvents ? onPointerDown : noop,\n  )\n\n  useUnmountEffect(() => panSession.current?.end())\n}\n"]},"metadata":{},"sourceType":"module"}