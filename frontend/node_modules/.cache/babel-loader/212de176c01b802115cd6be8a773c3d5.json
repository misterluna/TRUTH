{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\n\nimport sync, { cancelSync } from \"framesync\";\nimport { isMouseEvent, extractEventInfo, addPointerEvent, isMultiTouchEvent } from \"./pointer-event\";\nimport { pipe, distance, noop } from \"./function\";\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\n\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  // The pointer event that started the pan session\n  // The current pointer event for the pan session\n  // The current pointer event info for the pan session\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  constructor(_event, handlers, threshold) {\n    _defineProperty(this, \"history\", []);\n\n    _defineProperty(this, \"startEvent\", null);\n\n    _defineProperty(this, \"lastEvent\", null);\n\n    _defineProperty(this, \"lastEventInfo\", null);\n\n    _defineProperty(this, \"handlers\", {});\n\n    _defineProperty(this, \"removeListeners\", noop);\n\n    _defineProperty(this, \"threshold\", 3);\n\n    _defineProperty(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      var info = getPanInfo(this.lastEventInfo, this.history);\n      var isPanStarted = this.startEvent !== null;\n      var isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      this.history.push(info.point);\n      var {\n        onStart,\n        onMove\n      } = this.handlers;\n\n      if (!isPanStarted) {\n        onStart == null ? void 0 : onStart(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n\n      onMove == null ? void 0 : onMove(this.lastEvent, info);\n    });\n\n    _defineProperty(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info; // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n\n      if (isMouseEvent(event) && event.buttons === 0) {\n        this.onPointerUp(event, info);\n        return;\n      } // Throttle mouse move event to once per frame\n\n\n      sync.update(this.updatePoint, true);\n    });\n\n    _defineProperty(this, \"onPointerUp\", (event, info) => {\n      this.end();\n      var {\n        onEnd\n      } = this.handlers;\n      if (!onEnd || !this.startEvent) return;\n      var panInfo = getPanInfo(info, this.history);\n      onEnd == null ? void 0 : onEnd(event, panInfo);\n    }); // If we have more than one touch, don't start detecting this gesture\n\n\n    if (isMultiTouchEvent(_event)) return;\n    this.handlers = handlers;\n\n    if (threshold) {\n      this.threshold = threshold;\n    } // stop default browser behavior\n\n\n    _event.stopPropagation();\n\n    _event.preventDefault(); // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n\n\n    var _info = extractEventInfo(_event);\n\n    this.history = [_info.point]; // notify pan session start\n\n    var {\n      onSessionStart\n    } = handlers;\n    onSessionStart == null ? void 0 : onSessionStart(_event, getPanInfo(_info, this.history)); // attach event listeners and return a single function to remove them all\n\n    this.removeListeners = pipe(addPointerEvent(window, \"pointermove\", this.onPointerMove), addPointerEvent(window, \"pointerup\", this.onPointerUp), addPointerEvent(window, \"pointercancel\", this.onPointerUp));\n  }\n\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n\n  end() {\n    var _this$removeListeners;\n\n    (_this$removeListeners = this.removeListeners) == null ? void 0 : _this$removeListeners.call(this);\n    cancelSync.update(this.updatePoint);\n  }\n\n}\n\nfunction subtractPoint(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n\nfunction startPanPoint(history) {\n  return history[0];\n}\n\nfunction lastPanPoint(history) {\n  return history[history.length - 1];\n}\n\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history))\n  };\n}","map":{"version":3,"sources":["../../src/pan-event.ts"],"names":["noop","constructor","isMultiTouchEvent","event","info","extractEventInfo","onSessionStart","getPanInfo","pipe","addPointerEvent","isPanStarted","isDistancePastThreshold","x","y","onMove","onStart","isMouseEvent","sync","onEnd","panInfo","updateHandlers","end","cancelSync","a","b","history","point","delta","subtractPoint","lastPanPoint","offset","startPanPoint"],"mappings":"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","sourcesContent":["/**\n * This is a modified version of `PanSession` from `framer-motion`.\n *\n * Credit goes to `framer-motion` of this useful utilities.\n * License can be found here: https://github.com/framer/motion\n */\n\nimport sync, { cancelSync } from \"framesync\"\nimport {\n  isMouseEvent,\n  extractEventInfo,\n  addPointerEvent,\n  AnyPointerEvent,\n  Point,\n  PointerEventInfo,\n  isMultiTouchEvent,\n} from \"./pointer-event\"\nimport { pipe, distance, noop } from \"./function\"\n\n/**\n * The event information passed to pan event handlers like `onPan`, `onPanStart`.\n *\n * It contains information about the current state of the tap gesture such as its\n * `point`, `delta`, and `offset`\n */\nexport interface PanEventInfo {\n  /**\n   * Contains `x` and `y` values for the current pan position relative\n   * to the device or page.\n   */\n  point: Point\n  /**\n   * Contains `x` and `y` values for the distance moved since\n   * the last pan event.\n   */\n  delta: Point\n  /**\n   * Contains `x` and `y` values for the distance moved from\n   * the first pan event.\n   */\n  offset: Point\n}\n\nexport type PanHandler = (event: AnyPointerEvent, info: PanEventInfo) => void\n\nexport interface PanSessionHandlers {\n  /**\n   * Callback fired when the pan session is created.\n   * This is typically called once `pointerdown` event is fired.\n   */\n  onSessionStart: PanHandler\n  /**\n   * Callback fired when the pan session has started.\n   * The pan session when the pan offset is greater than\n   * the threshold (allowable move distance to detect pan)\n   */\n  onStart: PanHandler\n  /**\n   * Callback fired while panning\n   */\n  onMove: PanHandler\n  /**\n   * Callback fired when the current pan session has end.\n   * This is typically called once `pointerup` event is fired.\n   */\n  onEnd: PanHandler\n}\n\n/**\n * @internal\n *\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanSession {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: Point[] = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanSessionHandlers> = {}\n\n  private removeListeners: Function = noop\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanSessionHandlers>,\n    threshold?: number,\n  ) {\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = extractEventInfo(event)\n    this.history = [info.point]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(window, \"pointermove\", this.onPointerMove),\n      addPointerEvent(window, \"pointerup\", this.onPointerUp),\n      addPointerEvent(window, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    this.history.push(info.point)\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Because Safari doesn't trigger mouseup events when it's above a `<select>`\n    if (isMouseEvent(event) && event.buttons === 0) {\n      this.onPointerUp(event, info)\n      return\n    }\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.end()\n\n    const { onEnd } = this.handlers\n    if (!onEnd || !this.startEvent) return\n\n    const panInfo = getPanInfo(info, this.history)\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanSessionHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\nfunction subtractPoint(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction startPanPoint(history: Point[]) {\n  return history[0]\n}\n\nfunction lastPanPoint(history: Point[]) {\n  return history[history.length - 1]\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: Point[]) {\n  return {\n    point: info.point,\n    delta: subtractPoint(info.point, lastPanPoint(history)),\n    offset: subtractPoint(info.point, startPanPoint(history)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}